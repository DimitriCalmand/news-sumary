name: Deploy News Summary to Raspberry Pi

on:
  push:
    branches: ["main"]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  BACKEND_IMAGE: news-summary-backend
  FRONTEND_IMAGE: news-summary-frontend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      # 1. Récupération du code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Connexion à Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 3. Configurer Docker Buildx pour multi-arch
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 4. Build et Push backend pour ARM64 (Raspberry Pi)
      - name: Build and push backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          platforms: linux/arm64,linux/amd64
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.BACKEND_IMAGE }}:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.BACKEND_IMAGE }}:${{ github.sha }}

      # 5. Build et Push frontend pour ARM64 (Raspberry Pi)
      - name: Build and push frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          platforms: linux/arm64,linux/amd64
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.FRONTEND_IMAGE }}:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.FRONTEND_IMAGE }}:${{ github.sha }}

      # 6. Déploiement sur Raspberry Pi via SSH
      - name: Deploy to Raspberry Pi
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.RASPI_HOST }}
          username: ${{ secrets.RASPI_USERNAME }}
          key: ${{ secrets.RASPI_SSH_KEY }}
          port: ${{ secrets.RASPI_PORT }}
          script: |
            # Créer le répertoire de l'application s'il n'existe pas
            mkdir -p ~/news-summary
            cd ~/news-summary
            
            # Télécharger le docker-compose de production
            curl -o docker-compose.prod.yml https://raw.githubusercontent.com/${{ github.repository }}/main/docker-compose.prod.yml
            
            # Stopper les anciens conteneurs
            docker-compose -f docker-compose.prod.yml down || true
            
            # Nettoyer les anciennes images
            docker image prune -f
            
            # Télécharger les nouvelles images
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.BACKEND_IMAGE }}:latest
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.FRONTEND_IMAGE }}:latest
            
            # Démarrer les nouveaux conteneurs
            docker-compose -f docker-compose.prod.yml up -d
            
            # Vérifier que les services démarrent correctement
            sleep 10
            docker-compose -f docker-compose.prod.yml ps



